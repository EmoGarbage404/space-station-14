using System.Linq;
using System.Numerics;
using Content.Client.Xenoarchaeology.Artifact;
using Content.Shared.Xenoarchaeology.Artifact.Components;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client.Xenoarchaeology.Ui;

[GenerateTypedNameReferences]
public sealed partial class XenoArtifactGraphControl : BoxContainer
{
    [Dependency] private readonly IEntityManager _entityManager = default!;

    private Entity<XenoArtifactComponent>? _artifact;

    private float NodeRadius => 25 * UIScale;

    private float NodeDiameter => NodeRadius * 2;

    public XenoArtifactGraphControl()
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);
    }

    public void SetArtifact(Entity<XenoArtifactComponent>? artifact)
    {
        _artifact = artifact;
    }

    protected override void Draw(DrawingHandleScreen handle)
    {
        base.Draw(handle);

        if (_artifact == null)
            return;

        var artiSys = _entityManager.System<XenoArtifactSystem>();

        var bottomLeft = Position + Size with { X = 0 };

        var tiers = artiSys.GetAllNodes(_artifact.Value).OrderBy(e => e.Comp.Depth).ToList();

        for (var i = 0; i < tiers.Count; i++)
        {
            var node = tiers[i];
            var pos = bottomLeft + new Vector2(NodeDiameter * i + NodeRadius,  -NodeRadius + NodeDiameter * node.Comp.Depth);
            handle.DrawCircle(pos, NodeRadius, Color.White, false);
        }
    }
}

